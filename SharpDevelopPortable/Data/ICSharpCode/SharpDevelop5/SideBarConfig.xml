<SideBarConfig version="1.0">
  <SideBar activetab="${res:SharpDevelop.SideBar.ClipboardRing}">
    <SideTab clipboardring="true" text="${res:SharpDevelop.SideBar.ClipboardRing}">
      <SideTabItem text="public void q1(int t){Cell[&quot;q1&quot;, t] = 0.01;	}" value="		public void q1(int t){Cell[&quot;q1&quot;, t] = 0.01;	}" />
      <SideTabItem text="public void q1(int t)&#xD;" value="		public void q1(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q1&quot;, t] = 0.01;	&#xD;&#xA;		}" />
      <SideTabItem text="Model1 m1 = new Model1();			&#xD;" value="			Model1 m1 = new Model1();			&#xD;&#xA;			&#xD;&#xA;			m1.q2(10);" />
      <SideTabItem text="public class Model1&#xD;" value="public class Model1&#xD;&#xA;	{&#xD;&#xA;		public Cell Cell;&#xD;&#xA;		&#xD;&#xA;		public Model1()&#xD;&#xA;		{&#xD;&#xA;			Cell = new Cell();&#xD;&#xA;			&#xD;&#xA;			Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;&#xA;			Cell.RegisterMethod(&quot;q2&quot;, q2);&#xD;&#xA;			Cell.RegisterMethod(&quot;q3&quot;, q3);&#xD;&#xA;			Cell.RegisterMethod(&quot;lx_1&quot;, lx_1);&#xD;&#xA;			Cell.RegisterMethod(&quot;Dx_1&quot;, Dx_1);&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void SetModel()&#xD;&#xA;		{			&#xD;&#xA;&#xD;&#xA;		}&#xD;&#xA;						&#xD;&#xA;		public void q1(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q1&quot;, t] = 0.01;	&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void q2(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q2&quot;, t] = 0.01 * t;	&#xD;&#xA;		}&#xD;&#xA;	&#xD;&#xA;		public void q3(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q3&quot;, t] = 0.02 * t;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void lx_1(int t)&#xD;&#xA;		{		&#xD;&#xA;			if(t==0)&#xD;&#xA;			{&#xD;&#xA;				Cell[&quot;lx_1&quot;, t] = 0;				&#xD;&#xA;			}&#xD;&#xA;			else&#xD;&#xA;			{&#xD;&#xA;				Cell[&quot;lx_1&quot;, t] = (1 - Cell[&quot;q1&quot;, t-1]) * Cell[&quot;lx_1&quot;, t-1];&#xD;&#xA;			}		&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void Dx_1(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;Dx_1&quot;, t] = Cell[&quot;lx_1&quot;, t] * Math.Pow(0.98, t);&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;	}" />
      <SideTabItem text="using System;&#xD;" value="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Collections;&#xD;&#xA;using Models.ModelObjects;&#xD;&#xA;&#xD;&#xA;namespace Models.Models&#xD;&#xA;{&#xD;&#xA;	/// &lt;summary&gt;&#xD;&#xA;	/// Description of Model1.&#xD;&#xA;	/// &lt;/summary&gt;&#xD;&#xA;	public class Model1&#xD;&#xA;	{&#xD;&#xA;		public Cell Cell;&#xD;&#xA;		&#xD;&#xA;		public Model1()&#xD;&#xA;		{&#xD;&#xA;			Cell = new Cell();&#xD;&#xA;			&#xD;&#xA;			Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;&#xA;			Cell.RegisterMethod(&quot;q2&quot;, q2);&#xD;&#xA;			Cell.RegisterMethod(&quot;q3&quot;, q3);&#xD;&#xA;			Cell.RegisterMethod(&quot;lx_1&quot;, lx_1);&#xD;&#xA;			Cell.RegisterMethod(&quot;Dx_1&quot;, Dx_1);&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void SetModel()&#xD;&#xA;		{			&#xD;&#xA;&#xD;&#xA;		}&#xD;&#xA;						&#xD;&#xA;		public void q1(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q1&quot;, t] = 0.01;	&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void q2(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q2&quot;, t] = 0.01 * t;	&#xD;&#xA;		}&#xD;&#xA;	&#xD;&#xA;		public void q3(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;q3&quot;, t] = 0.02 * t;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void lx_1(int t)&#xD;&#xA;		{		&#xD;&#xA;			if(t==0)&#xD;&#xA;			{&#xD;&#xA;				Cell[&quot;lx_1&quot;, t] = 0;				&#xD;&#xA;			}&#xD;&#xA;			else&#xD;&#xA;			{&#xD;&#xA;				Cell[&quot;lx_1&quot;, t] = (1 - Cell[&quot;q1&quot;, t-1]) * Cell[&quot;lx_1&quot;, t-1];&#xD;&#xA;			}		&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void Dx_1(int t)&#xD;&#xA;		{&#xD;&#xA;			Cell[&quot;Dx_1&quot;, t] = Cell[&quot;lx_1&quot;, t] * Math.Pow(0.98, t);&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;}&#xD;&#xA;" />
      <SideTabItem text="using System;&#xD;" value="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;&#xD;&#xA;namespace Models.ModelObjects&#xD;&#xA;{&#xD;&#xA;public class Cell&#xD;&#xA;{&#xD;&#xA;    private readonly Dictionary&lt;string, Dictionary&lt;string, double&gt;&gt; _cache = new Dictionary&lt;string, Dictionary&lt;string, double&gt;&gt;();&#xD;&#xA;    private readonly Dictionary&lt;string, Delegate&gt; _methods = new Dictionary&lt;string, Delegate&gt;();&#xD;&#xA;&#xD;&#xA;    public void RegisterMethod(string methodName, Action&lt;int&gt; method)&#xD;&#xA;    {&#xD;&#xA;        if (!_methods.ContainsKey(methodName))&#xD;&#xA;        {&#xD;&#xA;            _methods[methodName] = method;&#xD;&#xA;            _cache[methodName] = new Dictionary&lt;string, double&gt;();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    public double this[string methodName, params object[] args]&#xD;&#xA;    {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (!_methods.ContainsKey(methodName))&#xD;&#xA;            {&#xD;&#xA;                throw new ArgumentException(string.Format(&quot;Method '{0}' is not registered.&quot;, methodName));&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var method = _methods[methodName];&#xD;&#xA;            var argKey = GenerateArgKey(args);&#xD;&#xA;&#xD;&#xA;            if (_cache[methodName].ContainsKey(argKey))&#xD;&#xA;            {&#xD;&#xA;                return _cache[methodName][argKey];&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            	var result = method.DynamicInvoke(args);&#xD;&#xA;            	return _cache[methodName][argKey];&#xD;&#xA;            }&#xD;&#xA;                      &#xD;&#xA;//            var result = method.DynamicInvoke(args);&#xD;&#xA;//            _cache[methodName][argKey] = (double)result;&#xD;&#xA;//            return (double)result;&#xD;&#xA;        }&#xD;&#xA;        set&#xD;&#xA;        {&#xD;&#xA;            var argKey = GenerateArgKey(args);&#xD;&#xA;            _cache[methodName][argKey] = (double)value;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    private string GenerateArgKey(object[] args)&#xD;&#xA;    {&#xD;&#xA;        return string.Join(&quot;,&quot;, args);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;" />
      <SideTabItem text="public" value="public" />
      <SideTabItem text="return _cache[methodName][argKey];" value="return _cache[methodName][argKey];" />
      <SideTabItem text="var result = method.DynamicInvoke(args);" value="var result = method.DynamicInvoke(args);" />
      <SideTabItem text="Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;" value="			Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;&#xA;			Cell.RegisterMethod(&quot;q2&quot;, q2);&#xD;&#xA;			Cell.RegisterMethod(&quot;q3&quot;, q3);&#xD;&#xA;			Cell.RegisterMethod(&quot;lx_1&quot;, lx_1);&#xD;&#xA;			Cell.RegisterMethod(&quot;Dx_1&quot;, Dx_1);	" />
      <SideTabItem text="method" value="method" />
      <SideTabItem text="Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;" value="			Cell.RegisterMethod(&quot;q1&quot;, q1);	&#xD;&#xA;			Cell.RegisterMethod&lt;double&gt;(&quot;q2&quot;, q2);&#xD;&#xA;			Cell.RegisterMethod&lt;double&gt;(&quot;q3&quot;, q3);&#xD;&#xA;			Cell.RegisterMethod&lt;double&gt;(&quot;lx_1&quot;, lx_1);&#xD;&#xA;			Cell.RegisterMethod&lt;double&gt;(&quot;Dx_1&quot;, Dx_1);	" />
      <SideTabItem text="Cell" value="Cell" />
      <SideTabItem text="Action" value="Action" />
      <SideTabItem text="&lt;double&gt;" value="&lt;double&gt;" />
      <SideTabItem text="Dx_1" value="Dx_1" />
      <SideTabItem text="lx_1" value="lx_1" />
      <SideTabItem text="q3" value="q3" />
      <SideTabItem text="q2" value="q2" />
      <SideTabItem text="Cell.RegisterMethod(&quot;q1&quot;, q1);" value="			Cell.RegisterMethod(&quot;q1&quot;, q1);" />
    </SideTab>
  </SideBar>
</SideBarConfig>